"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _deviceFeature = _interopRequireDefault(require("./device-feature"));

var _dan = require("./dan");

var _exceptions = require("./exceptions");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var _default = /*#__PURE__*/function () {
  function _default(option) {
    _classCallCheck(this, _default);

    this.apiUrl = option.apiUrl;
    this.deviceModel = option.deviceModel;
    this.deviceAddr = option.deviceAddr;
    this.deviceName = option.deviceName;
    this.persistentBinding = option.persistentBinding || false;
    this.username = option.username;
    this.extraSetupWebpage = option.extraSetupWebpage || '';
    this.deviceWebpage = option.deviceWebpage || '';
    this.onRegister = option.onRegister;
    this.onDeregister = option.onDeregister;
    this.onConnect = option.onConnect;
    this.onDisconnect = option.onDisconnect;
    this.pushInterval = option.pushInterval !== undefined ? option.pushInterval : 1;
    this.interval = option.interval || {};
    this.device_features = {};
    this.flags = {};
    this.onSignal = this.onSignal.bind(this);
    this.onData = this.onData.bind(this);
    this.parseDFProfile(option, 'idf');
    this.parseDFProfile(option, 'odf');
  }

  _createClass(_default, [{
    key: "pushData",
    value: function pushData(DFName) {
      var _this = this;

      if (this.device_features[DFName].pushData == null) return;
      var interval = this.interval[DFName] !== undefined ? this.interval[DFName] : this.pushInterval;
      console.debug("".concat(DFName, " : ").concat(this.flags[DFName], " [message / ").concat(interval, " s]"));
      var pushInterval = setInterval(function () {
        var data = _this.device_features[DFName].pushData();

        if (!_this.flags[DFName]) {
          clearInterval(pushInterval);
          return;
        }

        if (data === undefined) {
          return;
        }

        _this.dan.push(DFName, data);
      }, interval * 1000);
    }
  }, {
    key: "onSignal",
    value: function onSignal(signal, DFList) {
      var _this2 = this;

      console.log("Receive signal: ".concat(signal, ", ").concat(DFList));

      if (signal === 'CONNECT') {
        DFList.forEach(function (DFName) {
          if (_this2.flags[DFName]) {
            return;
          }

          _this2.flags[DFName] = true;

          _this2.pushData(DFName);
        });
      } else if (signal === 'DISCONNECT') {
        DFList.forEach(function (DFName) {
          _this2.flags[DFName] = false;
        });
      } else if (signal === 'SUSPEND') {// Not use
      } else if (signal === 'RESUME') {// Not use
      }

      return true;
    }
  }, {
    key: "onData",
    value: function onData(DFName, data) {
      try {
        this.device_features[DFName].onData(data);
      } catch (err) {
        console.error(err);
        return false;
      }

      return true;
    }
  }, {
    key: "checkParameters",
    value: function checkParameters() {
      if (!this.apiUrl) throw new _exceptions.RegistrationError('apiUrl is required.');
      if (!this.deviceModel) throw new _exceptions.RegistrationError('deviceModel not given.');

      if (this.persistentBinding && !this.deviceAddr) {
        throw new _exceptions.ArgumentError('In case of `persistentBinding` set to `True`, ' + 'the `deviceAddr` should be set and fixed.');
      }

      if (Object.keys(this.device_features).length === 0) throw new _exceptions.RegistrationError('Neither idfList nor odfList is empty.');
    }
  }, {
    key: "run",
    value: function run() {
      var _this3 = this;

      this.checkParameters();
      this.dan = new _dan.Client();
      var idfList = [];
      var odfList = [];
      Object.entries(this.device_features).forEach(function (_ref) {
        var _ref2 = _slicedToArray(_ref, 2),
            DFName = _ref2[0],
            df = _ref2[1];

        if (df.DFType === 'idf') {
          idfList.push([DFName, df.DFType]);
        } else {
          odfList.push([DFName, df.DFType]);
        }
      });
      var option = {
        url: this.apiUrl,
        onSignal: this.onSignal,
        onData: this.onData,
        acceptProtos: ['mqtt'],
        id: this.deviceAddr,
        idfList: idfList,
        odfList: odfList,
        name: this.deviceName,
        profile: {
          model: this.deviceModel,
          u_name: this.username,
          extra_setup_webpage: this.extraSetupWebpage,
          device_webpage: this.deviceWebpage
        },
        onRegister: this.onRegister,
        onDeregister: this.onDeregister,
        onConnect: this.onConnect,
        onDisconnect: function onDisconnect() {
          Object.keys(_this3.flags).forEach(function (i) {
            _this3.flags[i] = false;
          });
          console.debug("onDisconnect: _flag = ".concat(_this3.flags));

          if (_this3.onDisconnect) {
            _this3.onDisconnect();
          }
        }
      };
      this.dan.register(option); // FIXME: window is not defined in node.js
      // eslint-disable-next-line func-names

      window.onbeforeunload = function () {
        if (_this3.persistentBinding) {
          return;
        }

        try {
          _this3.dan.deregister();
        } catch (error) {
          console.error("dai process cleanup exception: ".concat(error));
        }
      };
    }
  }, {
    key: "parseDFProfile",
    value: function parseDFProfile(option, typ) {
      var _this4 = this;

      var DFList = "".concat(typ, "List");
      if (option[DFList] === undefined) return;
      option[DFList].forEach(function (x) {
        var DFName;
        var paramType;
        var onData;
        var pushData;

        if (!Array.isArray(x)) {
          // `[idf]` or `[idfFunc]`
          if (typeof x === 'string') {
            DFName = x;
            onData = null;
            pushData = null;
          } else {
            // in case of callable
            DFName = _this4.constructor.DFNameFromFunc(x.name);
            onData = x;
            pushData = x;
          }

          paramType = null;
        } else if (Array.isArray(x) && x.length === 2) {
          if (typeof x[0] === 'string') {
            var _x = _slicedToArray(x, 2);

            DFName = _x[0];
            paramType = _x[1];
            onData = null;
            pushData = null;
          } else {
            DFName = _this4.constructor.DFNameFromFunc(x[0].name);

            var _x2 = _slicedToArray(x, 2);

            onData = _x2[0];
            paramType = _x2[1];

            var _x3 = _slicedToArray(x, 1);

            pushData = _x3[0];
          }
        } else {
          throw new _exceptions.RegistrationError("Invalid ".concat(DFList, ", usage: [dfFunc, ...] or [[dfFunc, type], ...]"));
        }

        var df = new _deviceFeature["default"]({
          DFName: DFName,
          DFType: typ,
          paramType: paramType,
          pushData: pushData,
          onData: onData
        });
        _this4.device_features[DFName] = df;
      });
    }
  }], [{
    key: "DFNameFromFunc",
    value: function DFNameFromFunc(DFName) {
      if (DFName.match(/_[A-Z]?(I|O)[0-9]?$/i)) {
        return DFName.replace('_', '-');
      }

      return DFName;
    }
  }]);

  return _default;
}();

exports["default"] = _default;